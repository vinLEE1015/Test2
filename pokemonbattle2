import pygame
from pygame.locals import *
import time
import math
import random
import requests
import io
from urllib.request import urlopen

pygame.init()

font_path = "NanumGothic-Regular.ttf"  # 폰트 파일 경로
font_size = 20

# 게임 윈도우 생성
game_width = 500
game_height = 500
size = (game_width, game_height)
game = pygame.display.set_mode(size)
pygame.display.set_caption('포켓몬 배틀')

# 색상 정의
black = (0, 0, 0)
gold = (218, 165, 32)
grey = (200, 200, 200)
green = (0, 200, 0)
red = (200, 0, 0)
white = (255, 255, 255)

# API 기본 URL
base_url = 'https://pokeapi.co/api/v2'

# 포켓몬 이름 한글 매핑
pokemon_name_ko = {
    "bulbasaur": "이상해씨",
    "charmander": "파이리",
    "squirtle": "꼬부기",
    "Bulbasaur": "이상해씨",
    "Charmander": "파이리",
    "Squirtle": "꼬부기",
}

# 공격 이름 한글 매핑
move_name_ko = {
    "tackle": "몸통박치기",
    "bubble": "거품광선",
    "bite": "물기",
    "ember": "불꽃세례",
    "slash": "베어가르기",
    "scratch": "할퀴기",
    "rage": "분노",
    "water-gun": "물대포",
    "vine-whip": "덩굴채찍",
    "razor-leaf": "잎날가르기",
    "fight": "싸우기",  # 소문자로 수정
    "use potion": "상처약",  # 소문자로 수정
}




class Move():
    def __init__(self, url):
        # API 호출
        req = requests.get(url)
        self.json = req.json()
        
        self.name_ko = self.json['name']
        self.name_ko = move_name_ko.get(self.name_ko.lower(), self.name_ko.capitalize())
        self.power = self.json['power']
        self.type = self.json['type']['name']

class Pokemon(pygame.sprite.Sprite):
    def __init__(self, name, level, x, y):
        pygame.sprite.Sprite.__init__(self)
        req = requests.get(f'{base_url}/pokemon/{name.lower()}')
        self.json = req.json()

        # 포켓몬 이름 설정
        self.name_ko = name
        self.name_ko = pokemon_name_ko.get(name.lower(), name)
        self.level = level
        self.x = x
        self.y = y
        self.num_potions = 3
        
        # 스탯 설정
        stats = self.json['stats']
        for stat in stats:
            if stat['stat']['name'] == 'hp':
                self.current_hp = stat['base_stat'] + self.level
                self.max_hp = stat['base_stat'] + self.level
            elif stat['stat']['name'] == 'attack':
                self.attack = stat['base_stat']
            elif stat['stat']['name'] == 'defense':
                self.defense = stat['base_stat']
            elif stat['stat']['name'] == 'speed':
                self.speed = stat['base_stat']

        self.types = [t['type']['name'] for t in self.json['types']]
        self.size = 150
        self.set_sprite('front_default')
    
    def perform_attack(self, other, move):
        display_message(f'{self.name_ko}가 {move.name_ko}을(를) 사용했다!')
        time.sleep(2)

        damage = (2 * self.level + 10) / 250 * self.attack / other.defense * move.power
        if move.type in self.types:
            damage *= 1.5
        if random.randint(1, 10000) <= 625:
            damage *= 1.5
        other.take_damage(math.floor(damage))
    
    def take_damage(self, damage):
        self.current_hp -= damage
        if self.current_hp < 0:
            self.current_hp = 0
    
    def use_potion(self):
        if self.num_potions > 0:
            self.current_hp += 30
            if self.current_hp > self.max_hp:
                self.current_hp = self.max_hp
            self.num_potions -= 1

    def set_sprite(self, side):
        image = self.json['sprites'][side]
        image_stream = urlopen(image).read()
        image_file = io.BytesIO(image_stream)
        self.image = pygame.image.load(image_file).convert_alpha()
        scale = self.size / self.image.get_width()
        self.image = pygame.transform.scale(self.image, (int(self.image.get_width() * scale), int(self.image.get_height() * scale)))
        
    def set_moves(self):
        self.moves = []
        for move_data in self.json['moves']:
            versions = move_data['version_group_details']
            for version in versions:
                if version['version_group']['name'] != 'red-blue':
                    continue
                if version['move_learn_method']['name'] != 'level-up':
                    continue
                if self.level >= version['level_learned_at']:
                    move = Move(move_data['move']['url'])
                    if move.power is not None:
                        self.moves.append(move)
        if len(self.moves) > 4:
            self.moves = random.sample(self.moves, 4)

    def draw(self, alpha=255):
        sprite = self.image.copy()
        transparency = (255, 255, 255, alpha)
        sprite.fill(transparency, None, pygame.BLEND_RGBA_MULT)
        game.blit(sprite, (self.x, self.y))
        
    def draw_hp(self):
        bar_scale = 200 // self.max_hp
        for i in range(self.max_hp):
            bar = (self.hp_x + bar_scale * i, self.hp_y, bar_scale, 20)
            pygame.draw.rect(game, red, bar)
        for i in range(self.current_hp):
            bar = (self.hp_x + bar_scale * i, self.hp_y, bar_scale, 20)
            pygame.draw.rect(game, green, bar)
        font = pygame.font.Font(pygame.font.get_default_font(), 16)
        text = font.render(f'HP: {self.current_hp} / {self.max_hp}', True, black)
        text_rect = text.get_rect()
        text_rect.x = self.hp_x
        text_rect.y = self.hp_y + 30
        game.blit(text, text_rect)
        
    def get_rect(self):
        return Rect(self.x, self.y, self.image.get_width(), self.image.get_height())

# 한글 폰트 로드
font_path = "NanumGothic-Regular.ttf"  # 폰트 파일 경로
font_size = 20

# display_message 함수 수정
def display_message(message):
    # 메시지 박스
    pygame.draw.rect(game, white, (10, 350, 480, 140))
    pygame.draw.rect(game, black, (10, 350, 480, 140), 3)

    # 메시지 출력
    font = pygame.font.Font(font_path, font_size)  # 한글 폰트 지정
    text = font.render(message, True, black)
    text_rect = text.get_rect()
    text_rect.x = 30
    text_rect.y = 410
    game.blit(text, text_rect)

    pygame.display.update()

# create_button 함수 수정
def create_button(width, height, left, top, text_cx, text_cy, label):
    mouse_cursor = pygame.mouse.get_pos()
    button = Rect(left, top, width, height)
    if button.collidepoint(mouse_cursor):
        pygame.draw.rect(game, gold, button)
    else:
        pygame.draw.rect(game, white, button)
    
    # 한글 폰트로 버튼 레이블 출력
    font = pygame.font.Font(font_path, 16)
    text = font.render(f'{label}', True, black)
    text_rect = text.get_rect(center=(text_cx, text_cy))
    game.blit(text, text_rect)
    return button


# 이하의 나머지 코드는 기존 흐름 그대로 이어지며, 한글화된 메시지를 반영해 출력합니다.
# create the starter pokemons
level = 30
bulbasaur = Pokemon('bulbasaur', level, 25, 150)
Charmander = Pokemon('Charmander', level, 175, 150)
Squirtle = Pokemon('Squirtle', level, 325, 150)
pokemons = [bulbasaur, Charmander, Squirtle]

# the player's and rival's selected pokemon
player_pokemon = None
rival_pokemon = None

# game loop
game_status = 'select pokemon'
while game_status != 'quit':
    
    for event in pygame.event.get():
        if event.type == QUIT:
            game_status = 'quit'
            
        # detect keypress
        if event.type == KEYDOWN:
            
            # play again
            if event.key == K_y:
                # reset the pokemons
                bulbasaur = Pokemon('Bulbasaur', level, 25, 150)
                Charmander = Pokemon('Charmander', level, 175, 150)
                Squirtle = Pokemon('Squirtle', level, 325, 150)
                pokemons = [bulbasaur, Charmander, Squirtle]
                game_status = 'select pokemon'
                
            # quit
            elif event.key == K_n:
                game_status = 'quit'
            
        # detect mouse click
        if event.type == MOUSEBUTTONDOWN:
            
            # coordinates of the mouse click
            mouse_click = event.pos
            
            # for selecting a pokemon
            if game_status == 'select pokemon':
                
                # check which pokemon was clicked on
                for i in range(len(pokemons)):
                    
                    if pokemons[i].get_rect().collidepoint(mouse_click):
                        
                        # assign the player's and rival's pokemon
                        player_pokemon = pokemons[i]
                        rival_pokemon = pokemons[(i + 1) % len(pokemons)]
                        
                        # lower the rival pokemon's level to make the battle easier
                        rival_pokemon.level = int(rival_pokemon.level * .75)
                        
                        # set the coordinates of the hp bars
                        player_pokemon.hp_x = 275
                        player_pokemon.hp_y = 250
                        rival_pokemon.hp_x = 50
                        rival_pokemon.hp_y = 50
                        
                        game_status = 'prebattle'
            
            # for selecting fight or use potion
            elif game_status == 'player turn':
                
                # check if fight button was clicked
                if fight_button.collidepoint(mouse_click):
                    game_status = 'player move'
                    
                # check if potion button was clicked
                if potion_button.collidepoint(mouse_click):
                    
                    # force to attack if there are no more potions
                    if player_pokemon.num_potions == 0:
                        display_message('남은 상처약이 없다!')
                        time.sleep(2)
                        game_status = 'player move'
                    else:
                        player_pokemon.use_potion()
                        display_message(f'{player_pokemon.name} 는 상처약을 사용했다!')
                        time.sleep(2)
                        game_status = 'rival turn'
                        
            # for selecting a move
            elif game_status == 'player move':
                
                # check which move button was clicked
                for i in range(len(move_buttons)):
                    button = move_buttons[i]
                    
                    if button.collidepoint(mouse_click):
                        move = player_pokemon.moves[i]
                        player_pokemon.perform_attack(rival_pokemon, move)
                        
                        # check if the rival's pokemon fainted
                        if rival_pokemon.current_hp == 0:
                            game_status = 'fainted'
                        else:
                            game_status = 'rival turn'
            
    # pokemon select screen
    if game_status == 'select pokemon':
        
        game.fill(white)
        
        # draw the starter pokemons
        bulbasaur.draw()
        Charmander.draw()
        Squirtle.draw()
        
        # draw box around pokemon the mouse is pointing to
        mouse_cursor = pygame.mouse.get_pos()
        for pokemon in pokemons:
            
            if pokemon.get_rect().collidepoint(mouse_cursor):
                pygame.draw.rect(game, black, pokemon.get_rect(), 2)
        
        pygame.display.update()
        
    # get moves from the API and reposition the pokemons
    if game_status == 'prebattle':
        
        # draw the selected pokemon
        game.fill(white)
        player_pokemon.draw()
        pygame.display.update()
        
        player_pokemon.set_moves()
        rival_pokemon.set_moves()
        
        # reposition the pokemons
        player_pokemon.x = -50
        player_pokemon.y = 100
        rival_pokemon.x = 250
        rival_pokemon.y = -50
        
        # resize the sprites
        player_pokemon.size = 300
        rival_pokemon.size = 300
        player_pokemon.set_sprite('back_default')
        rival_pokemon.set_sprite('front_default')
        
        game_status = 'start battle'
        
    # start battle animation
    if game_status == 'start battle':
        
        # rival sends out their pokemon
        alpha = 0
        while alpha < 255:
            
            game.fill(white)
            rival_pokemon.draw(alpha)
            display_message(f'라이벌이 {rival_pokemon.name_ko}를 내보냈다!')
            alpha += .4
            
            pygame.display.update()
            
        # pause for 1 second
        time.sleep(1)
        
        # player sends out their pokemon
        alpha = 0
        while alpha < 255:
            
            game.fill(white)
            rival_pokemon.draw()
            player_pokemon.draw(alpha)
            display_message(f'가라 {player_pokemon.name_ko}!')
            alpha += .4
            
            pygame.display.update()
        
        # draw the hp bars
        player_pokemon.draw_hp()
        rival_pokemon.draw_hp()
        
        # determine who goes first
        if rival_pokemon.speed > player_pokemon.speed:
            game_status = 'rival turn'
        else:
            game_status = 'player turn'
            
        pygame.display.update()
        
        # pause for 1 second
        time.sleep(1)
        
    # display the fight and use potion buttons
# 플레이어의 차례
    if game_status == 'player turn':
        
        game.fill(white)
        player_pokemon.draw()
        rival_pokemon.draw()
        player_pokemon.draw_hp()
        rival_pokemon.draw_hp()
        
        # 버튼 생성 (싸우기, 상처약)
        fight_button = create_button(240, 140, 10, 350, 130, 412, move_name_ko.get("fight"))
        potion_button = create_button(240, 140, 250, 350, 370, 412, f'{move_name_ko.get("use potion")} ({player_pokemon.num_potions}개)')
        
        pygame.draw.rect(game, black, (10, 350, 480, 140), 3)
        
        pygame.display.update()

        

        # draw the black border
        pygame.draw.rect(game, black, (10, 350, 480, 140), 3)
        
        pygame.display.update()
        
    # display the move buttons
    if game_status == 'player move':
        
        game.fill(white)
        player_pokemon.draw()
        rival_pokemon.draw()
        player_pokemon.draw_hp()
        rival_pokemon.draw_hp()
        
        # create a button for each move
        move_buttons = []
        for i in range(len(player_pokemon.moves)):
            move = player_pokemon.moves[i]
            button_width = 240
            button_height = 70
            left = 10 + i % 2 * button_width
            top = 350 + i // 2 * button_height
            text_center_x = left + 120
            text_center_y = top + 35
            button = create_button(button_width, button_height, left, top, text_center_x, text_center_y, move.name_ko.capitalize())
            move_buttons.append(button)
            
        # draw the black border
        pygame.draw.rect(game, black, (10, 350, 480, 140), 3)
        
        pygame.display.update()
        
    # rival selects a random move to attack with
    if game_status == 'rival turn':
        
        game.fill(white)
        player_pokemon.draw()
        rival_pokemon.draw()
        player_pokemon.draw_hp()
        rival_pokemon.draw_hp()
        
        # empty the display box and pause for 2 seconds before attacking
        display_message('')
        time.sleep(2)
        
        # select a random move
        move = random.choice(rival_pokemon.moves)
        rival_pokemon.perform_attack(player_pokemon, move)
        
        # check if the player's pokemon fainted
        if player_pokemon.current_hp == 0:
            game_status = 'fainted'
        else:
            game_status = 'player turn'
            
        pygame.display.update()
        
    # one of the pokemons fainted
    if game_status == 'fainted':
        
        alpha = 255
        while alpha > 0:
            
            game.fill(white)
            player_pokemon.draw_hp()
            rival_pokemon.draw_hp()
            
            # determine which pokemon fainted
            if rival_pokemon.current_hp == 0:
                player_pokemon.draw()
                rival_pokemon.draw(alpha)
                display_message(f'{rival_pokemon.name}가 쓰러졌다!')
            else:
                player_pokemon.draw(alpha)
                rival_pokemon.draw()
                display_message(f'{player_pokemon.name}가 쓰러졌다!')
            alpha -= .4
            
            pygame.display.update()
            
        game_status = '라이벌에게 승리했다!'
        
    # gameover screen
    if game_status == '라이벌에게 패배했다...':
        
        display_message('Play again (Y/N)?')
        
pygame.quit()